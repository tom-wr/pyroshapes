package  {		import flash.display.MovieClip;	import Box2D.Common.Math.b2Vec2;	import Box2D.Collision.b2AABB;	import flash.display.Sprite;	import Box2D.Dynamics.b2World;	import Box2D.Dynamics.b2DebugDraw;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Shape;	import Box2D.Dynamics.b2Body;	import flash.ui.Mouse;	import flash.media.Sound;	import flash.events.ProgressEvent;	import flash.system.fscommand;			public class Main extends MovieClip {				//World Step		private const TIME_STEP:Number = 1/30;		private const VELOCITY_ITERATION:int = 2;		private const POSITION_ITERATION:int = 2;				private var _levelSprite:Sprite;		private var _world:b2World;		private var _counter:Counter;		private var _shapeMaker:ShapeMaker;		private var _currentLevel:Level;		private var _ghostShape:Shape;		private var progressBar:MovieClip;						public function Main() {			makeProgressBar();						loaderInfo.addEventListener(Event.COMPLETE, completeDownload);			loaderInfo.addEventListener(ProgressEvent.PROGRESS, progressMade);		}				private function makeProgressBar():void {			progressBar = new LoadingBar();			progressBar.x = 320;			progressBar.y = 240;			this.addChild(progressBar);		}				private function progressMade(e:ProgressEvent):void {			trace(loaderInfo.bytesLoaded + " | " + loaderInfo.bytesTotal);			var percent:int = Math.floor((loaderInfo.bytesLoaded/loaderInfo.bytesTotal)*100);			progressBar.gotoAndStop(percent);			progressBar.percentText.text = percent+"%";					}				private function completeDownload(e:Event):void {			this.removeChild(progressBar);			gotoAndStop(3);			init();		}				private function init():void {			_world = braveNewWorld();						_levelSprite = new Sprite();			addChild(_levelSprite);			_ghostShape = new Shape();			//_world.SetDebugDraw(makeDebugDraw());			_counter = new Counter(_world, _levelSprite);			_shapeMaker = new ShapeMaker(_counter);			makeMusic();			displayMainMenuScreen();		}				private function update(e:Event):void {						_currentLevel.updateSkins();			_currentLevel.updateInterface();			if(_currentLevel.checkWin()) {				endLevel();			}			checkExitLevel();			checkRestart();									_world.Step(TIME_STEP, VELOCITY_ITERATION, POSITION_ITERATION);			_world.ClearForces();			_world.DrawDebugData();		}				private function braveNewWorld():b2World {			var gravity:b2Vec2 = new b2Vec2(0,10);			var world:b2World = new b2World(gravity, true);			return world;		}				private function makeMusic():void {			var sound:Sound = new BackgroundMusic();			sound.play(0,99);		}				private function addListeningEvents():void {			addEventListener(Event.ENTER_FRAME, update);		}				private function removeListeningEvents():void {			removeEventListener(Event.ENTER_FRAME, update);		}				private function checkRestart():void {			if(_currentLevel.checkRestart()) {				restartLevel();			}		}				private function checkExitLevel():void {			if(_currentLevel.exitLevel) {				displayMainMenu();			}		}				private function restartLevel(e:MouseEvent = null):void {			destroyLevel();			makeLevel();		}				private function endLevel():void {			setCurrentLevelScore();			destroyLevel();			displayEndLevel();		}				private function destroyLevel():void {			removeListeningEvents();			clearBodies();			clearLevelSprite();		}				private function clearBodies():void {			var node:b2Body = _world.GetBodyList();			while(node) {				var destroyBody:b2Body = node;				node = node.GetNext();				_world.DestroyBody(destroyBody);			}		}				private function clearLevelSprite():void {			while(_levelSprite.numChildren) {				_levelSprite.removeChildAt(0);			}				}				private function displayEndLevel():void {			var endScreen:MovieClip = new EndLevelScreen();			endScreen.x = _counter.swfWidth/2;			endScreen.y = _counter.swfHeight/2;						fillStars(endScreen);			addEndLevelButtons(endScreen);			_counter.levelSprite.addChild(endScreen);		}				private function fillStars(endScreen:MovieClip):void {			var starCount:int = _counter.starCount;			if(starCount == 1){				endScreen.star1.gotoAndStop("full");				endScreen.levelRatingText.gotoAndStop("ok");							}			else if(starCount == 2) {				endScreen.star1.gotoAndStop("full");				endScreen.star2.gotoAndStop("full");				endScreen.levelRatingText.gotoAndStop("good");			}			else if(starCount == 3) {				endScreen.star1.gotoAndStop("full");				endScreen.star2.gotoAndStop("full");				endScreen.star3.gotoAndStop("full");				endScreen.levelRatingText.gotoAndStop("perfect");			}			else {				endScreen.levelRatingText.gotoAndStop("fail");			}		}				private function addEndLevelButtons(endScreen:MovieClip):void {					if(_counter.starCount == 0) {				endScreen.nextLevelButton.visible = false;			}			endScreen.nextLevelButton.addEventListener(MouseEvent.CLICK, nextLevel);			endScreen.retryButton.addEventListener(MouseEvent.CLICK, restartLevel);			endScreen.mainMenuButton.addEventListener(MouseEvent.CLICK, displayMainMenu);		}				private function nextLevel(e:MouseEvent):void {			_counter.currentLevelNumber += 1;			clearLevelSprite();			makeLevel();		}				private function displayMainMenu(e:MouseEvent = null):void {			destroyLevel();			displayMainMenuScreen();		}				////////////////		//// Mouse /////				private function mousePressed(e:MouseEvent):void{			_counter.mouseInitX = e.stageX;			_counter.mouseInitY = e.stageY;			_counter.drawing = true;		}				private function mouseMoved(e:MouseEvent):void {			var initX:Number = _counter.mouseInitX;			var initY:Number = _counter.mouseInitY;			if(_counter.drawing && _counter.drawBox && _counter.squareCount > 0) {				_ghostShape.graphics.clear();				_ghostShape.graphics.beginFill(0xFF0000,0.5);				_ghostShape.graphics.drawRect(initX, initY, e.stageX-initX, e.stageY-initY);				_levelSprite.addChild(_ghostShape);			}			else if(_counter.drawing && !_counter.drawBox && _counter.circleCount > 0) {				_ghostShape.graphics.clear();				_ghostShape.graphics.beginFill(0xFF0000,0.5);				_ghostShape.graphics.drawCircle(initX, initY, e.stageX-initX);				_levelSprite.addChild(_ghostShape);			}		}				private function mouseReleased(e:MouseEvent):void {			_counter.drawing = false;			_ghostShape.graphics.clear();						var finalX = e.stageX;			var finalY = e.stageY;			var initX = _counter.mouseInitX;			var initY = _counter.mouseInitY;						if(!_counter.drawBox && _counter.circleCount > 0) {				var circleRadius:Number = Math.abs(finalX-initX);				if(circleRadius > 2) {					_counter.addToPlayerShapeList(_shapeMaker.makeDynamicCircle(circleRadius, initX, initY));				}			}			else if(_counter.drawBox && _counter.squareCount > 0) {				if(finalY < initY) {					var tempY:Number = initY;					initY = finalY;					finalY = tempY;				}				if(finalX < initX) {					var tempX:Number = initX;					initX = finalX;					finalX = tempX;				}				var boxWidth:Number = Math.abs(finalX - initX);				var boxHeight:Number = Math.abs(finalY - initY);				if(boxHeight > 2 && boxWidth > 2) {					_counter.addToPlayerShapeList(_shapeMaker.makeDynamicBox(boxWidth/2, boxHeight/2, initX+(boxWidth/2), initY+(boxHeight/2)));				}			}		}				private function displayMainMenuScreen():void{			var menuScreen:MovieClip = new MainMenuScreen();			menuScreen.x = _counter.swfWidth/2;			menuScreen.y = _counter.swfHeight/2;			_counter.levelSprite.addChild(menuScreen);						menuScreen.startButton.addEventListener(MouseEvent.CLICK, function(){startLevelSelectScreen(menuScreen);});			menuScreen.quitButton.addEventListener(MouseEvent.CLICK, quit);		}				private function startLevelSelectScreen(menuScreen:MovieClip):void {			menuScreen.gotoAndPlay("levelSelect");			for(var i:int = 1; i<=10;i++) {				setUpLevelButton(i, menuScreen);			}		}				private function setUpLevelButton(levelNum:int, menuScreen:MovieClip):void {			switch(levelNum) {				case 1:				menuScreen.levelButton1.levelNumber.text = "1";				menuScreen.levelButton1.levelNumber.selectable = false;				menuScreen.levelButton1.starLine.gotoAndStop(""+(_counter.level1Score+1));				menuScreen.levelButton1.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=1;makeLevel();});				break;				case 2:				menuScreen.levelButton2.levelNumber.text = "2";				menuScreen.levelButton2.levelNumber.selectable = false;				menuScreen.levelButton2.starLine.gotoAndStop(""+(_counter.level2Score+1));				menuScreen.levelButton2.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=2;makeLevel();});				break;				case 3:				menuScreen.levelButton3.levelNumber.text = "3";				menuScreen.levelButton3.levelNumber.selectable = false;				menuScreen.levelButton3.starLine.gotoAndStop(""+(_counter.level3Score+1));				trace("Level3Score = " + _counter.level3Score);				menuScreen.levelButton3.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=3;makeLevel();});				break;				case 4:				menuScreen.levelButton4.levelNumber.text = "4";				menuScreen.levelButton4.levelNumber.selectable = false;				menuScreen.levelButton4.starLine.gotoAndStop(""+(_counter.level4Score+1));				menuScreen.levelButton4.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=4;makeLevel();});				break;				case 5:				menuScreen.levelButton5.levelNumber.text = "5";				menuScreen.levelButton5.levelNumber.selectable = false;				menuScreen.levelButton5.starLine.gotoAndStop(""+(_counter.level5Score+1));				menuScreen.levelButton5.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=5;makeLevel();});				break;				case 6:				menuScreen.levelButton6.levelNumber.text = "6";				menuScreen.levelButton6.levelNumber.selectable = false;				menuScreen.levelButton6.starLine.gotoAndStop(""+(_counter.level6Score+1));				menuScreen.levelButton6.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=6;makeLevel();});				break;				case 7:				menuScreen.levelButton7.levelNumber.text = "7";				menuScreen.levelButton7.levelNumber.selectable = false;				menuScreen.levelButton7.starLine.gotoAndStop(""+(_counter.level7Score+1));				menuScreen.levelButton7.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=7;makeLevel();});				break;				case 8:				menuScreen.levelButton8.levelNumber.text = "8";				menuScreen.levelButton8.levelNumber.selectable = false;				menuScreen.levelButton8.starLine.gotoAndStop(""+(_counter.level8Score+1));				menuScreen.levelButton8.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=8;makeLevel();});				break;				case 9:				menuScreen.levelButton9.levelNumber.text = "9";				menuScreen.levelButton9.levelNumber.selectable = false;				menuScreen.levelButton9.starLine.gotoAndStop(""+(_counter.level9Score+1));				menuScreen.levelButton9.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=9;makeLevel();});				break;				case 10:				menuScreen.levelButton10.levelNumber.text = "10";				menuScreen.levelButton10.levelNumber.selectable = false;				menuScreen.levelButton10.starLine.gotoAndStop(""+(_counter.level10Score+1));				menuScreen.levelButton10.addEventListener(MouseEvent.CLICK, function(){_counter.currentLevelNumber=10;makeLevel();});				break;				default:			}		}				private function setCurrentLevelScore():void {			var starCount:int = _counter.starCount;			var currentLevel:int = _counter.currentLevelNumber;			switch(currentLevel) {				case 1:				_counter.level1Score = starCount;				break;				case 2:				_counter.level2Score = starCount;				break;				case 3:				_counter.level3Score = starCount;				trace("setting level3Score to " + starCount);				break;				case 4:				_counter.level4Score = starCount;				break;				case 5:				_counter.level5Score = starCount;				break;				case 6:				_counter.level6Score = starCount;				break;				case 7:				_counter.level7Score = starCount;				break;				case 8:				_counter.level8Score = starCount;				break;				case 9:				_counter.level9Score = starCount;				break;				case 10:				_counter.level10Score = starCount;				break;			}		}				private function makeLevel():void {			_counter.resetLevelCounter();				var levelNumber:int = _counter.currentLevelNumber;			switch(levelNumber) {				case 1:				_currentLevel = new LevelA(_counter, _shapeMaker);				break;				case 2:				_currentLevel = new LevelB(_counter, _shapeMaker);				break;				case 3:				_currentLevel = new LevelC(_counter, _shapeMaker);				break;				case 4:				_currentLevel = new LevelD(_counter, _shapeMaker);				break;				case 5:				_currentLevel = new LevelE(_counter, _shapeMaker);				break;				case 6:				_currentLevel = new LevelF(_counter, _shapeMaker);				break;				case 7:				_currentLevel = new LevelG(_counter, _shapeMaker);				break;				case 8:				_currentLevel = new LevelH(_counter, _shapeMaker);				break;				case 9:				_currentLevel = new LevelI(_counter, _shapeMaker);				break;				case 10:				_currentLevel = new LevelJ(_counter, _shapeMaker);				break;				default:				_currentLevel = new LevelA(_counter, _shapeMaker);				break;			}			addLevelListeners();			addListeningEvents();		}				private function quit():void {			trace("Quit Game");			fscommand("quit");		}				private function addLevelListeners():void {			stage.addEventListener(MouseEvent.MOUSE_DOWN, mousePressed);			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoved);			stage.addEventListener(MouseEvent.MOUSE_UP, mouseReleased);		}				private function makeDebugDraw():b2DebugDraw{			var debugSprite:Sprite = new Sprite();			_levelSprite.addChild(debugSprite);			var debugDraw:b2DebugDraw = new b2DebugDraw();			debugDraw.SetSprite(debugSprite);			debugDraw.SetDrawScale(_counter.pixelToMetre);			debugDraw.SetLineThickness(1.0);			debugDraw.SetAlpha(1);			debugDraw.SetFillAlpha(0.4);			debugDraw.SetFlags(b2DebugDraw.e_shapeBit);			return debugDraw;				}	}	}