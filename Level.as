package {	import flash.display.MovieClip;	import Box2D.Common.Math.b2Vec2;	import flash.events.MouseEvent;	import Box2D.Dynamics.b2Body;	public class Level	{		protected var _counter:Counter;		protected var _shapeMaker:ShapeMaker;		protected var _instructionsOn:Boolean;				private var _toolBar:MovieClip;		private var _dialog:MovieClip;		private var _endLevel:Boolean;		private var _exitLevel:Boolean;		private var _timer:int;						public function Level(counter:Counter, shapeMaker:ShapeMaker)		{			_counter = counter;			_shapeMaker = shapeMaker;			_endLevel = false;			_exitLevel = false;			_timer = 0;			_instructionsOn = false;						makeBackground();			makeToolBar();				}				public function updateInterface():void {			_toolBar.updateText();			_toolBar.updateDisabledButtons();			checkMenuDialog();			stokeTheFire();		}				private function checkMenuDialog():void {			var callMenu:Boolean = _toolBar.callMenuDialog;			if(callMenu) {				openMenuDialog();				_toolBar.callMenuDialog = false;			}		}				private function openMenuDialog():void {			_dialog = new MenuDialog();			_dialog.x = _counter.swfWidth/2;			_dialog.y = _counter.swfHeight/2;							var mainMenuButton:MovieClip = new MainMenuButton();			mainMenuButton.x = 0;			mainMenuButton.y = -15;			_dialog.addChild(mainMenuButton);			var cancelButton:MovieClip = new CancelButton();			cancelButton.x = 0;			cancelButton.y = 15;			_dialog.addChild(cancelButton);						_counter.levelSprite.addChild(_dialog);						mainMenuButton.addEventListener(MouseEvent.CLICK, exitToMenu);			cancelButton.addEventListener(MouseEvent.CLICK, closeDialog);		}				private function closeDialog(e:MouseEvent):void {			_counter.levelSprite.removeChild(_dialog);		}				private function exitToMenu(e:MouseEvent):void{			_exitLevel = true;			trace("exitLevel = " + _exitLevel);		}						private function stokeTheFire():void {			if(!_instructionsOn) {				var index:int = _counter.levelSprite.numChildren-1;				for each(var fire:MovieClip in _counter.fireList) {							_counter.levelSprite.setChildIndex(fire, index);				}				_counter.levelSprite.setChildIndex(_toolBar, index);			}		}				public function checkWin():Boolean {			checkObjectivePosition();			checkDynamicPosition();						if(_counter.starCount == 3) {				return true;			}			else if(_counter.squareCount == 0 && _counter.circleCount == 0) {				_timer++;				if(!checkMovingBodies()) {					return true;				}				else if(_counter.playerShapeList.length == 0 && !checkMovingObjectives()) {					return true;				}				else if(_timer > 240) {					trace("timer");					return true;				}			}			return false;		}				private function checkObjectivePosition():void {			var objectiveList:Array = _counter.objectiveList;			for (var i:int =0; i < objectiveList.length; i++) {				var dynamicBody:DynamicBody = objectiveList[i];				var bodyVec:b2Vec2 = dynamicBody.body.GetPosition();				var posY:Number = bodyVec.y*_counter.pixelToMetre;				var posX:Number = bodyVec.x*_counter.pixelToMetre;				if(posY > _counter.swfHeight && posX > 0 && posX < _counter.swfWidth) {					_counter.starCount++;					objectiveList.splice(i,1);					_toolBar.updateStars();				}				else if (posY > _counter.swfHeight) {					_counter.world.DestroyBody(dynamicBody.body);					objectiveList.splice(i,1);				}			}		}				private function checkDynamicPosition():void {			var playerShapeList:Array = _counter.playerShapeList;			for(var i:int = 0; i < playerShapeList.length; i++) {								var dynamicBody:DynamicBody = playerShapeList[i];				var bodyVec:b2Vec2 = dynamicBody.body.GetPosition();				var posY:Number = bodyVec.y*_counter.pixelToMetre;				var posX:Number = bodyVec.x*_counter.pixelToMetre;				if(posY > _counter.swfHeight) {					trace("DESTROY!!!");					trace(playerShapeList.length);					_counter.world.DestroyBody(dynamicBody.body);					_counter.levelSprite.removeChild(dynamicBody.bodySkin);					playerShapeList.splice(i,1);				}			}		}				private function checkMovingBodies():Boolean {			for each(var dynamicBody:DynamicBody in _counter.dynamicList) {				if (dynamicBody.body.IsAwake())				return true;			}			return false;		}				private function checkMovingObjectives():Boolean {			for each(var objective:DynamicBody in _counter.objectiveList) {				if(objective.body.IsAwake()) {					return true;				}			}			return false;		}				public function updateSkins():void {			var dynamicList:Array = _counter.dynamicList;			for each(var dynamicBody:DynamicBody in dynamicList) {				dynamicBody.updateSkin();			}		}				public function checkRestart():Boolean {			return _toolBar.callRestart;		}				private function drawGeo():void {			_shapeMaker.makeDynamicCircle(20, 200, 200);			geoMakeGround();		}				private function geoMakeGround():void {			_shapeMaker.makeStatic(20, 25, 20, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 60, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 100, _counter.swfHeight-20);						//Second quarter			_shapeMaker.makeStatic(20, 25, 140, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 180, _counter.swfHeight-20);					_shapeMaker.makeStatic(20, 25, 220, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 260, _counter.swfHeight-20);						//Central pair			_shapeMaker.makeStatic(20, 20, 300, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 20, 340, _counter.swfHeight-20);						//Third quarter			_shapeMaker.makeStatic(20, 25, 380, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 420, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 460, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 500, _counter.swfHeight-20);						//Last quarter			_shapeMaker.makeStatic(20, 25, 540, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 580, _counter.swfHeight-20);			_shapeMaker.makeStatic(20, 25, 620, _counter.swfHeight-20);		}				private function makeBackground():void {			var backgroundMC:MovieClip = new LevelBackgroundMC();			backgroundMC.x = (_counter.swfWidth/2);			backgroundMC.y = (_counter.swfHeight/2)-2;						_counter.levelSprite.addChild(backgroundMC);		}				private function makeToolBar():void {			_toolBar = new ToolBar(_counter);						_counter.levelSprite.addChild(_toolBar);		}				public function get endLevel():Boolean {			return _endLevel;		}				public function get exitLevel():Boolean {			return _exitLevel;		}				public function get instructionsOn():Boolean {			return _instructionsOn;		}			}}