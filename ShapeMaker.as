package {		import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Dynamics.b2World;	import Box2D.Collision.Shapes.b2CircleShape;	import Box2D.Collision.b2Point;	import flash.display.MovieClip;		public class ShapeMaker	{		//objective constants		private const OBJECTIVE_WIDTH:int = 15; // in pixels		private const OBJECTIVE_HEIGHT:int = 25; // in pixels				//object variables		private var _counter:Counter;		private var _world:b2World;				public function ShapeMaker(counter:Counter)		{			_counter = counter;			_world = counter.world;		}				public function makeDynamicBox(boxWidth:Number, boxHeight:Number, boxX:Number, boxY:Number):DynamicBody {						var boxBodyDef:b2BodyDef = new b2BodyDef();			boxBodyDef.type = b2Body.b2_dynamicBody;			boxBodyDef.position.Set(boxX/_counter.pixelToMetre,boxY/_counter.pixelToMetre);						var body:b2Body = _world.CreateBody(boxBodyDef);						var dynamicBox:b2PolygonShape = new b2PolygonShape();			dynamicBox.SetAsBox(boxWidth/_counter.pixelToMetre, boxHeight/_counter.pixelToMetre);			var boxFixtureDef:b2FixtureDef = new b2FixtureDef;			boxFixtureDef.shape = dynamicBox;			boxFixtureDef.density = 1;			boxFixtureDef.friction = 0.5;			boxFixtureDef.restitution = 0.05;						body.CreateFixture(boxFixtureDef);						var dynamicBody:DynamicBody = new DynamicBody(body, makeBoxSkin(),														  boxWidth, boxHeight, _counter);			_counter.addToDynmaicList(dynamicBody);			_counter.squareCount -=1;			return dynamicBody;					}				public function makeDynamicCircle(circleRadius:Number, boxX:Number, boxY:Number):DynamicBody {						var circleBodyDef:b2BodyDef = new b2BodyDef();			circleBodyDef.type = b2Body.b2_dynamicBody;			circleBodyDef.position.Set(boxX/_counter.pixelToMetre,boxY/_counter.pixelToMetre);						var circleBody:b2Body = _world.CreateBody(circleBodyDef);						var circleShape:b2CircleShape = new b2CircleShape(circleRadius/_counter.pixelToMetre);						var circleFixtureDef:b2FixtureDef = new b2FixtureDef();			circleFixtureDef.shape = circleShape;			circleFixtureDef.density = 1;			circleFixtureDef.friction = 0.5;			circleFixtureDef.restitution = 0.3;			circleBody.CreateFixture(circleFixtureDef);						var dynamicBody:DynamicBody = new DynamicBody(circleBody, makeCircleSkin(),														  circleRadius, circleRadius, _counter);			_counter.addToDynmaicList(dynamicBody);			_counter.circleCount -= 1;			return dynamicBody;		}				public function makeStatic(boxWidth:Number, boxHeight:Number, boxX:Number, boxY:Number):void{			var boxBodyDef:b2BodyDef = new b2BodyDef();			boxBodyDef.position.Set(boxX/_counter.pixelToMetre,boxY/_counter.pixelToMetre);						var body:b2Body = _world.CreateBody(boxBodyDef);						var boxShape:b2PolygonShape = new b2PolygonShape();			boxShape.SetAsBox(boxWidth/_counter.pixelToMetre, boxHeight/_counter.pixelToMetre);						var boxFixtureDef:b2FixtureDef = new b2FixtureDef();			boxFixtureDef.shape = boxShape;			boxFixtureDef.density = 1;			boxFixtureDef.friction = 0.5;						body.CreateFixture(boxFixtureDef);						skinStatics(body, boxWidth, boxHeight);		}				public function birthObjective(posX:Number, posY:Number):DynamicBody {			var boxBodyDef:b2BodyDef = new b2BodyDef();			boxBodyDef.type = b2Body.b2_dynamicBody;			boxBodyDef.position.Set(posX/_counter.pixelToMetre, posY/_counter.pixelToMetre);						var body:b2Body = _world.CreateBody(boxBodyDef);						var boxShape:b2PolygonShape = new b2PolygonShape();			boxShape.SetAsBox(OBJECTIVE_WIDTH/_counter.pixelToMetre, OBJECTIVE_HEIGHT/_counter.pixelToMetre);						var boxFixtureDef:b2FixtureDef = new b2FixtureDef();			boxFixtureDef.shape = boxShape;			boxFixtureDef.density = 1;			boxFixtureDef.friction = 0.5;						body.CreateFixture(boxFixtureDef);						var dynamicBody:DynamicBody = new DynamicBody(body, makeObjectiveSkin(), 														  OBJECTIVE_WIDTH, OBJECTIVE_HEIGHT, _counter);			_counter.addToDynmaicList(dynamicBody);			_counter.addToObjectiveList(dynamicBody);			return dynamicBody;					}				public function makeFire(fireWidth:int, fireHeight:int, posX:int, posY:int) {			var fire:MovieClip = new FlameTile();			fire.width = fireWidth*2;			fire.height = fireHeight*2;			fire.x = posX;			fire.y = posY;						_counter.levelSprite.addChild(fire);			_counter.addToFireList(fire);		}				private function skinStatics(body:b2Body, boxWidth:Number, boxHeight:Number):void {			var staticSkin:MovieClip = new StaticMC();			staticSkin.x = body.GetPosition().x * _counter.pixelToMetre;			staticSkin.y = body.GetPosition().y * _counter.pixelToMetre;			staticSkin.height = boxHeight*2;			staticSkin.width = boxWidth*2;			_counter.levelSprite.addChild(staticSkin);		}				private function makeObjectiveSkin():MovieClip {			var newSkin:MovieClip = new ObjectiveMC();			return newSkin;		}				private function makeBoxSkin():MovieClip {			var newSkin:MovieClip = new BoxMC();			return newSkin;		}				private function makeCircleSkin():MovieClip {			var newSkin:MovieClip = new CircleMC();			return newSkin;		}			}}